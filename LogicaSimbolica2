import re
import tkinter as tk
from tkinter import simpledialog, messagebox

# Mapeo de frases a variables proposicionales inicial
mapa_proposiciones = {}

# Mapeo de conectivos en lenguaje natural a representaciones lógicas
mapa_conectivos = {
    "no": "¬",
    "no es cierto que": "¬",
    "no ocurre que": "¬",
    "y": "∧",
    "aunque": "∧",
    "pero": "∧",
    "sin embargo": "∧",
    "no obstante": "∧",
    "a pesar de": "∧",
    "o": "∨",
    "si": "→",
    "entonces": "→",
    "es suficiente para": "→",
    "es necesario para": "→",
    "si y solo si": "↔",
    "suficiente y necesario para": "↔",
    "es equivalente a": "↔",
    "siempre que": "→",
    "a menos que": "¬∨",
}

# Frases compuestas que queremos manejar como una sola proposición
frases_compuestas = {
    "hace frío": "H",
    # Agrega más frases compuestas si es necesario
}

def validar_proposicion(proposicion):
    if not proposicion.strip():
        return "Error: La proposición no puede estar vacía."
    
    if not any(conectivo in proposicion for conectivo in mapa_conectivos.keys()):
        return "Error: La proposición debe contener al menos un conectivo."

    return None

def convertir_a_fbf(proposicion):
    global mapa_proposiciones, mapa_conectivos
    
    # Validar la proposición antes de convertir
    error = validar_proposicion(proposicion)
    if error:
        return error
    
    # Eliminar espacios innecesarios
    proposicion = proposicion.strip().lower()

    # Reemplazar frases compuestas por sus representaciones
    for frase_compuesta, variable in frases_compuestas.items():
        proposicion = proposicion.replace(frase_compuesta, variable)

    # Reemplazar conectivos en lenguaje natural por sus representaciones lógicas
    for frase, conectivo in mapa_conectivos.items():
        proposicion = re.sub(r'\b' + re.escape(frase) + r'\b', conectivo, proposicion)

    # Asignar variables a frases
    frases = re.split(r'(\W+)', proposicion)
    frases = [frase.strip() for frase in frases if frase.strip()]
    proposicion_convertida = proposicion
    for frase in frases:
        if frase not in mapa_conectivos.values() and frase not in mapa_proposiciones:
            variable = simpledialog.askstring("Asignar variable", f"Asignar variable para '{frase}':")
            if variable:
                mapa_proposiciones[ frase] = variable
            else:
                return "Error: Se requiere una variable para continuar."
        proposicion_convertida = proposicion_convertida.replace(frase, mapa_proposiciones.get(frase, frase))
    
    # Añadir paréntesis en la proposición convertida
    stack = []
    buffer = ""
    for char in proposicion_convertida:
        if char in mapa_conectivos.values():
            if buffer:
                stack.append(buffer)
                buffer = ""
            stack.append(char)
        else:
            buffer += char
    if buffer:
        stack.append(buffer)

    proposicion_fbf = ""
    while stack:
        token = stack.pop(0)
        if token in mapa_conectivos.values():
            proposicion_fbf = f"({proposicion_fbf} {token} "
        else:
            proposicion_fbf += token
        proposicion_fbf += ")"

    # Verificar que todos los caracteres sean válidos
    for char in proposicion_fbf:
        if not char.isalpha() and char not in mapa_conectivos.values() and char not in '() ':
            return "Error: Caracter inválido en la proposición"
    
    # Verificar el balance de paréntesis
    if proposicion_fbf.count('(') != proposicion_fbf.count(')'):
        return "Error: Paréntesis desequilibrados"
    
    return "FBF: " + proposicion_fbf

def convertir_a_proposicion(fbf):
    mapa_inverso = {v: k for k, v in mapa_proposiciones.items()}
    
    proposicion = fbf
    for variable, frase in mapa_inverso.items():
        proposicion = proposicion.replace(variable, frase)
    
    return " Proposición molecular: " + proposicion

def convertir():
    entrada = entrada_texto.get()
    if modo.get() == "Moleculares a FBF":
        resultado = convertir_a_fbf(entrada)
    else:
        resultado = convertir_a_proposicion(entrada)
    salida_texto.config(state=tk.NORMAL)
    salida_texto.delete(1.0, tk.END)
    salida_texto.insert(tk.END, resultado)
    salida_texto.config(state=tk.DISABLED)

ventana = tk.Tk()
ventana.title("Proposiciones Moleculares")

etiqueta_entrada = tk.Label(ventana, text="Ingrese la proposición:")
etiqueta_entrada.pack(pady=5)

entrada_texto = tk.Entry(ventana, width=50)
entrada_texto.pack(pady=10)

modo = tk.StringVar(value="Moleculares a FBF")
radio1 = tk.Radiobutton(ventana, text="Moleculares a FBF", variable=modo, value="Moleculares a FBF")
radio2 = tk.Radiobutton(ventana, text="FBF a Moleculares", variable=modo, value="FBF a Moleculares")
radio1.pack()
radio2.pack()

boton_convertir = tk.Button(ventana, text="Convertir", command=convertir)
boton_convertir.pack(pady=10)

salida_texto = tk.Text(ventana, width=60, height=10, state=tk.DISABLED)
salida_texto.pack(pady=10)

etiqueta_salida = tk.Label(ventana, text="Resultado:")
etiqueta_salida.pack(pady=5)

ventana.mainloop()